services:

  # ------------------------------------------------------
  # traefik
  # ------------------------------------------------------

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.entrypoints: "web"
      traefik.http.routers.api.rule: "Host(`traefik.localhost`)"
      traefik.http.routers.api.service: "api@internal"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # ------------------------------------------------------
  # lldap
  # ------------------------------------------------------

  lldap:
    image: lldap/lldap:latest
    container_name: lldap
    restart: unless-stopped
    depends_on:
      - traefik
    environment:
      LLDAP_LDAP_PORT: "389"
      LLDAP_HTTP_PORT: "80"
      LLDAP_JWT_SECRET: "change_me"
      LLDAP_LDAP_BASE_DN: "dc=example,dc=org"
      LLDAP_USER_DN: "ou=people,dc=example,dc=org"
      LLDAP_USER_EMAIL: "mail@example.org"
      LLDAP_LDAP_USER_PASS: "change_me"
      LLDAP_ENABLE_PASSWORT_RESET: false
      UID: "0"
      GID: "0"
    labels:
      traefik.enable: "true"
      traefik.http.routers.lldap.entrypoints: "web"
      traefik.http.routers.lldap.rule: "Host(`ldap.localhost`)"
    expose:
      - "80"
      - "389"
    volumes:
      - ./data/lldap:/data:rw

  # ------------------------------------------------------
  # etherpad
  # ------------------------------------------------------

  postgres-etherpad:
    image: postgres:latest
    container_name: postgres-etherpad
    restart: unless-stopped
    environment:
      POSTGRES_DB: "etherpad"
      POSTGRES_USER: "etherpad"
      POSTGRES_PASSWORD: "change_me"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U etherpad -lqt | cut -d \\| -f 1 | grep -wq etherpad" ]
    volumes:
      - ./data/etherpad:/var/lib/postgresql/data:rw

  nginx-etherpad:
    image: nginx:latest
    container_name: nginx-etherpad
    restart: unless-stopped
    depends_on:
      - traefik
      - etherpad
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx-etherpad.entrypoints: "web"
      traefik.http.routers.nginx-etherpad.rule: "Host(`etherpad.localhost`)"
    volumes:
      - ./config/nginx-etherpad.conf:/etc/nginx/conf.d/default.conf:ro

  etherpad:
    build:
      context: ./etherpad-lite
      args:
        #ETHERPAD_PLUGINS: "ep_adminpads2 ep_comments_page ep_headings2 ep_markdown ep_mypads"
        ETHERPAD_PLUGINS: "ep_mypads"
    container_name: etherpad
    restart: unless-stopped
    depends_on:
      postgres-etherpad:
        condition: service_healthy
    volumes:
      - ./config/etherpad.json:/opt/etherpad-lite/settings.json:ro
      - ./etherpad-skin-medienhaus:/opt/etherpad-lite/src/static/skins/medienhaus:ro

  # ------------------------------------------------------
  # spacedeck
  # ------------------------------------------------------

  postgres-spacedeck:
    image: postgres:latest
    container_name: postgres-spacedeck
    restart: unless-stopped
    environment:
      POSTGRES_DB: "spacedeck"
      POSTGRES_USER: "spacedeck"
      POSTGRES_PASSWORD: "change_me"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U spacedeck -lqt | cut -d \\| -f 1 | grep -wq spacedeck" ]
    volumes:
      - ./data/spacedeck/database:/var/lib/postgresql/data:rw

  nginx-spacedeck:
    image: nginx:latest
    container_name: nginx-spacedeck
    restart: unless-stopped
    depends_on:
      - traefik
      - spacedeck
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx-spacedeck.entrypoints: "web"
      traefik.http.routers.nginx-spacedeck.rule: "Host(`spacedeck.localhost`)"
    volumes:
      - ./config/nginx-spacedeck.conf:/etc/nginx/conf.d/default.conf:ro

  spacedeck:
    build: ./spacedeck-open
    container_name: spacedeck
    restart: unless-stopped
    stop_grace_period: 1s
    depends_on:
      postgres-spacedeck:
        condition: service_healthy
    volumes:
      - ./config/spacedeck.json:/app/config/default.json:ro
      - ./data/spacedeck/storage:/app/storage:rw

  # ------------------------------------------------------
  # matrix-synapse
  # ------------------------------------------------------

  postgres-matrix-synapse:
    image: postgres:latest
    container_name: postgres-matrix-synapse
    restart: unless-stopped
    environment:
      POSTGRES_DB: "synapse"
      POSTGRES_USER: "synapse"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U synapse -lqt | cut -d \\| -f 1 | grep -wq synapse" ]
    volumes:
      - ./data/matrix-synapse/database:/var/lib/postgresql/data:rw

  nginx-matrix-synapse:
    image: nginx:latest
    container_name: nginx-matrix-synapse
    restart: unless-stopped
    depends_on:
      - traefik
      - matrix-synapse
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx-matrix-synapse.entrypoints: "web"
      traefik.http.routers.nginx-matrix-synapse.rule: "Host(`matrix.localhost`)"
    volumes:
      - ./config/nginx-matrix-synapse.conf:/etc/nginx/conf.d/default.conf:ro

  matrix-synapse:
    image: matrixdotorg/synapse:latest
    container_name: matrix-synapse
    restart: unless-stopped
    depends_on:
      postgres-matrix-synapse:
        condition: service_healthy
    environment:
      SYNAPSE_CONFIG_DIR: "/etc/matrix-synapse"
      SYNAPSE_CONFIG_PATH: "/etc/matrix-synapse/homeserver.yaml"
      SYNAPSE_DATA_DIR: "/data"
      UID: "0"
      GID: "0"
    volumes:
      - ./data/matrix-synapse/synapse:/data:rw
      - ./config/matrix-synapse.yaml:/etc/matrix-synapse/homeserver.yaml:ro

  #synapse-admin:
  #  build:
  #    context: https://github.com/Awesome-Technologies/synapse-admin.git
  #    args:
  #      REACT_APP_SERVER: "http://matrix.localhost"
  #  container_name: synapse-admin
  #  restart: unless-stopped
  #  depends_on:
  #    - traefik
  #  labels:
  #    traefik.enable: "true"
  #    traefik.http.routers.synapse-admin.entrypoints: "web"
  #    traefik.http.routers.synapse-admin.rule: "Host(`synapse-admin.localhost`)"

  # ------------------------------------------------------
  # element
  # ------------------------------------------------------

  element:
    image: vectorim/element-web:v1.11.57
    container_name: element
    restart: unless-stopped
    depends_on:
      - traefik
      - matrix-synapse
    labels:
      traefik.enable: "true"
      traefik.http.routers.element.entrypoints: "web"
      traefik.http.routers.element.rule: "Host(`element.localhost`)"
    volumes:
      - ./config/element.json:/app/config.json:ro

  # ------------------------------------------------------
  # medienhaus-spaces
  # ------------------------------------------------------

  medienhaus-spaces:
    build:
      context: ./medienhaus-spaces
      target: "development-runner"
    container_name: medienhaus-spaces
    restart: unless-stopped
    depends_on:
      - traefik
    environment:
      NODE_ENV: "development"
    labels:
      traefik.enable: "true"
      traefik.http.routers.medienhaus-spaces.entrypoints: "web"
      traefik.http.routers.medienhaus-spaces.rule: "Host(`localhost`)"
    develop:
      watch:
        - action: sync
          path: ./medienhaus-spaces
          target: /app
          ignore:
            - .next/
            - node_modules/
        - action: rebuild
          path: ./medienhaus-spaces/package.json
    volumes:
      - ./config/medienhaus-spaces.config.js:/app/config.js:ro

  element-medienhaus-spaces:
    image: vectorim/element-web:v1.11.57
    container_name: element-medienhaus-spaces
    restart: unless-stopped
    depends_on:
      - traefik
      - medienhaus-spaces
    labels:
      traefik.enable: "true"
      traefik.http.routers.element-medienhaus-spaces.entrypoints: "web"
      traefik.http.routers.element-medienhaus-spaces.rule: "Host(`localhost`) && PathPrefix(`/element/`)"
      traefik.http.routers.element-medienhaus-spaces.middlewares: "element-medienhaus-spaces@docker"
      traefik.http.middlewares.element-medienhaus-spaces.stripprefix.prefixes: "/element"
    volumes:
      - ./config/element-medienhaus-spaces.json:/app/config.json:ro
